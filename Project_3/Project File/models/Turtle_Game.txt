
--------------------------------------------------------------------------------------------------------
TURTLE GAME
--------------------------------------------------------------------------------------------------------
import turtle
import math
import random

wn = turtle.Screen()
wn.bgcolor("white")
wn.title("A Maze Game")
wn.setup(700, 700)
wn.tracer(0)

# images = ["images\w_right.gif", "images\w_right.gif",r"images\treasure.gif","images\wall_2.gif"]

# for image in images:
#     turtle.register_shape(image)


class Pen(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("black")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("turtle")
        self.color("blue")
        self.penup()
        self.speed(0)
        self.gold = 0

    def go_up(self):

        move_to_x = player.xcor()
        move_to_y = player.ycor() + 24

        if (move_to_x, move_to_y) not in walls:
            self.goto(self.xcor(), self.ycor() + 24)

    def go_down(self):
        move_to_x = player.xcor()
        move_to_y = player.ycor() - 24

        if (move_to_x, move_to_y) not in walls:
            self.goto(self.xcor(), self.ycor() - 24)
    
    def go_left(self):
        move_to_x = player.xcor() -24
        move_to_y = player.ycor() 

        if (move_to_x, move_to_y) not in walls:
            self.goto(self.xcor()-24, self.ycor())
    
    def go_right(self):
        move_to_x = player.xcor() +24
        move_to_y = player.ycor() 

        if (move_to_x, move_to_y) not in walls:
            self.goto(self.xcor()+24, self.ycor())

    def is_collision(self, other):
        a = self.xcor() - other.xcor()
        b = self.ycor() - other.ycor()
        distance = math.sqrt((a**2) + (b**2))

        if distance < 5:
            return True
        else:
            return False

class Treasure(turtle.Turtle):
    def __init__(self, x, y):
        turtle.Turtle.__init__(self)
        self.shape("circle")
        self.color("gold")
        self.penup()
        self.speed(0)
        self.gold = 100
        self.goto(x, y)
    
    def destroy(self):
        self.goto(2000,2000)
        self.hideturtle()


class Enemy(turtle.Turtle):
    def __init__(self, x, y):
        turtle.Turtle.__init__(self)
        self.shape("arrow")
        self.color("red")
        self.penup()
        self.speed(0)
        self.gold = 25
        self.goto(x, y)
        self.direction = random.choice(["up", "down", "left", "right"])
    
    def move(self):
        if self.direction == "up":
            dx = 0
            dy = 24
        elif self.direction == "down":
            dx = 0
            dy = -24
        elif self.direction == "left":
            dx = -24
            dy = 0
        elif self.direction == "right":
            dx = 24
            dy = 0
        else:
            dx = 0
            dy = 0

        move_to_x = self.xcor() + dx
        move_to_y = self.xcor() + dy

        if (move_to_x,move_to_y ) not in walls:
            self.goto(move_to_x, move_to_y)
        else:
            self.direction = random.choice(["up", "down", "left", "right"])
        turtle.ontimer(self.move, t = random.randint(100,300))
    
    def destroy(self):
        self.goto(2000,2000)
        self.hideturtle()

levels = [""]

level_1 = [
    "XXXXXXXXXXXXXXXXXXXXXXXXX",
    "XP XXXXXXX          XXXXX",
    "X  XXXXXXX  XXXXXX  XXXXX",
    "X       XXE XXXXXX  XXXXX",
    "X       XX  XXX E      XX",
    "XXXXXX  XX  XXX        XX",
    "XXXXXX  XX  XXXXXX  XXXXX",
    "XXXXXX  XX    XXXX  XXXXX",
    "X  XXX   E    XXXXT XXXXX",
    "X  XXX  XXXXXXXXXXXXXXXXX",
    "X         XXXXXXXXXXXXXXX",
    "X       E        XXXXXXXX",
    "XXXXXXXXXXXX     XXXXXX X",
    "XXXXXXXXXXXXXXX  XXXXXX X",
    "XXX  XXXXXXXXXX         X",
    "XXX        E            X",
    "XXX         XXXXXXXXXXXXX",
    "XXXXXXXXXX  XXXXXXXXXXXXX",
    "XXXXXXXXXX              X",
    "XX   XXXXX     E        X",
    "XX   XXXXXXXXXXXXX  XXXXX",
    "XX    YXXXXXXXXXXX  XXXXX",
    "XX          XXXX        X",
    "XXXX                    X",
    "XXXXXXXXXXXXXXXXXXXXXXXXX",
]


levels.append(level_1)


def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            character = level[y][x]
            screen_x = -288 + (x*24)
            screen_y = 288 - (y*24)

            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.shape("square")
                pen.stamp()
                walls.append((screen_x,screen_y))

            if character == "P":
                player.goto(screen_x, screen_y)
            
            if character == "T":
                treasures.append(Treasure(screen_x, screen_y))
            
            if character == "E":
                enemies.append(Enemy(screen_x, screen_y))
            


pen = Pen()
player = Player()
treasures = []
enemies = []
walls = []

setup_maze(levels[1])

turtle.listen()
turtle.onkey(player.go_left, "Left")
turtle.onkey(player.go_right, "Right")
turtle.onkey(player.go_up, "Up")
turtle.onkey(player.go_down, "Down")

for enemy in enemies:
    turtle.ontimer(enemy.move, t = 250)


while True:
    for treasure in treasures:
        if player.is_collision(treasure):
            player.gold += treasure.gold
            print("player Gold: {}".format(player.gold))
            treasure.destroy()
            treasures.remove(treasure)
    
    for enemy in enemies:
        if player.is_collision(enemy):
            print("Player dies!")

    wn.update()

--------------------------------------------------------------------------------------------------------